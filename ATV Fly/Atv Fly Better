-- Services
local workspace = cloneref(game:GetService("Workspace"))
local UserInputService = cloneref(game:GetService("UserInputService"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = workspace.CurrentCamera

-- Placeholder for LPH_JIT_MAX if not defined
if not LPH_JIT_MAX then
    LPH_JIT_MAX = function(...) return ... end
end

-- Utility table for managing connections
local cheat = {
    connections = { renderstepped = {} }
}

-- Hook global render loop like SwimHub does
RunService.RenderStepped:Connect(function(delta)
    for _, func in pairs(cheat.connections.renderstepped) do
        func(delta)
    end
end)

-- Utility function to create new renderstepped connections
cheat.utility = {}
cheat.utility.new_renderstepped = function(func)
    local obj = {}
    cheat.connections.renderstepped[func] = func
    function obj:Disconnect()
        if func then
            cheat.connections.renderstepped[func] = nil
            func = nil
        end
    end
    return obj
end

-- ATV Fly feature
do
    local carfly_enabled = false
    local speed, accel, upspeed = 300, 200, 15

    -- Toggle with Y key
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Enum.KeyCode.Y then
            carfly_enabled = not carfly_enabled
            warn("ATV Fly " .. (carfly_enabled and "enabled" or "disabled"))
        end
    end)

    -- Robust middlepart detection
    local middlepart
    task.spawn(function()
        repeat
            pcall(function()
                middlepart = workspace:WaitForChild("Const", 3):WaitForChild("Ignore", 3):WaitForChild("LocalCharacter", 3):WaitForChild("Middle", 3)
            end)
            task.wait(1)
        until middlepart
    end)

    -- Vehicle detection
    local car, dist = nil, 50
    local function findcar()
        car, dist = nil, 50
        for _, v in pairs(workspace:GetChildren()) do
            if v:FindFirstChild("Seat") and v:FindFirstChild("Frame") then
                local frame = v.Frame
                local ref_pos = (middlepart and middlepart.Position) or Camera.CFrame.Position
                local distance = (frame.Position - ref_pos).Magnitude
                if distance < dist then
                    car = v
                    dist = distance
                end
            end
        end
    end

    -- Movement logic
    local buildup = 0
    local lastdir = Vector3.new(1, 0, 0)

    cheat.utility.new_renderstepped(LPH_JIT_MAX(function(delta)
        if carfly_enabled then
            if not middlepart then return end
            local ref_pos = middlepart.Position
            if not car or not car:FindFirstChild("Frame") or (car.Frame.Position - ref_pos).Magnitude > 50 then
                findcar()
                buildup = 0
                return
            end

            local cameralook = Camera.CFrame.LookVector
            cameralook = Vector3.new(cameralook.X, 0, cameralook.Z)

            local direction = Vector3.zero
            direction = UserInputService:IsKeyDown(Enum.KeyCode.W) and direction + cameralook or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.S) and direction - cameralook or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.D) and direction + Vector3.new(-cameralook.Z, 0, cameralook.X) or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.A) and direction + Vector3.new(cameralook.Z, 0, -cameralook.X) or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.V) and direction + Vector3.yAxis or direction
            direction = UserInputService:IsKeyDown(Enum.KeyCode.B) and direction - Vector3.yAxis or direction

            if direction ~= Vector3.zero then
                direction = direction.Unit
                if direction ~= Vector3.yAxis and direction ~= -Vector3.yAxis then
                    buildup = math.clamp(buildup + delta * accel, 0, speed)
                    lastdir = direction
                end
            else
                direction = lastdir
                buildup = math.clamp(buildup - delta * 150, 0, speed)
            end

            for _, v in pairs(car:GetChildren()) do
                if v:IsA("BasePart") then
                    v.Anchored = false
                    v.AssemblyLinearVelocity = Vector3.new(direction.X * buildup, direction.Y * upspeed, direction.Z * buildup)
                end
            end
        end
    end))
end
