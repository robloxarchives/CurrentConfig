local RunService = game:GetService("RunService")
local FPSContainer = workspace:WaitForChild("Const"):WaitForChild("Ignore")
local parts = {}

-- ðŸ§Š Calm electric blue ripple with breathing pace
RunService.RenderStepped:Connect(function()
	local t = tick()

	for i, part in ipairs(parts) do
		local offset = i * 0.35 -- ripple delay per part
		local phase = math.sin(t * 2.5 + offset) -- breathing rhythm

		local brightness = math.abs(phase) ^ 2.5 -- soft pulse curve
		local transparency = 0.4 + (1 - brightness) * 0.5 -- soft shimmer

		-- ðŸŒŠ Aesthetic electric blue tone (no cyan, no deep navy)
		local color = Color3.fromRGB(
			math.floor(50 + brightness * 40),    -- soft blue-violet base
			math.floor(150 + brightness * 50),   -- soft teal edge
			math.floor(220 + brightness * 35)    -- glowing ice-blue top
		)

		part.Color = color
		part.Transparency = transparency
		part.Material = Enum.Material.ForceField
	end
end)

-- Applies material + stores for coloring
local function handlePart(part)
	if part:IsA("BasePart") then
		pcall(function() part.TextureID = "" end)
		table.insert(parts, part)
	end
end

-- Handles full FPSArms folder
local function processFPSArms(folder)
	for _, descendant in ipairs(folder:GetDescendants()) do
		handlePart(descendant)
	end
	folder.DescendantAdded:Connect(handlePart)
end

-- Already exists? Process now
local existing = FPSContainer:FindFirstChild("FPSArms")
if existing then
	processFPSArms(existing)
end

-- Watch for when it's added later
FPSContainer.ChildAdded:Connect(function(child)
	if child.Name == "FPSArms" then
		processFPSArms(child)
	end
end)
