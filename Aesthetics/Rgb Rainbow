local RunService = game:GetService("RunService")
local RGBRoot = workspace:WaitForChild("Const"):WaitForChild("Ignore")

local rainbowParts = {}
local trackedParts = {} -- avoid duplicates

-- ðŸŒˆ Full-spectrum RGB cycling using HSV
local function getHueColor(t)
	local hue = (t % 5) / 5 -- loop every 5 seconds
	return Color3.fromHSV(hue, 1, 1) -- full saturation, full brightness
end

-- ðŸ§  Register part only once
local function tryRegister(part)
	if part:IsA("BasePart") and not trackedParts[part] then
		part.Material = Enum.Material.ForceField
		pcall(function() part.TextureID = "" end)
		table.insert(rainbowParts, part)
		trackedParts[part] = true
	end
end

-- Bind all existing descendants
for _, descendant in ipairs(RGBRoot:GetDescendants()) do
	tryRegister(descendant)
end

-- Bind any new descendants dynamically
RGBRoot.DescendantAdded:Connect(tryRegister)

-- Real-time color update loop
RunService.RenderStepped:Connect(function()
	local color = getHueColor(tick())
	for _, part in ipairs(rainbowParts) do
		if part and part:IsDescendantOf(workspace) then
			part.Color = color
		end
	end
end)
